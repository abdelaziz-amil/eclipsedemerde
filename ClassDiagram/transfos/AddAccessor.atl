-- @nsURI ClassDiagram=http://ClassDiagram/1.0

module AddAccessorRefining;
create cible : ClassDiagram from source : ClassDiagram;

-- ****************************************************************
-- Helpers utilisï¿½s par la transformation 

-- retourne la chaine courante avec premier caractere en majuscule
helper context String def: firstToUpper() : String =
	self.substring(1, 1).toUpper() + self.substring(2, self.size());

-- retourne la reference sur le type void (suppose unique et present)
helper def: voidType : ClassDiagram!VoidType =
	ClassDiagram!VoidType.allInstances() -> asSequence() -> first();

-- verifie qu'un attribut possede un getter 
helper context ClassDiagram!Attribute def: hasGetter() : Boolean = 
	self.owner.methods -> exists ( m |
		m.name = 'get' + self.name.firstToUpper() and
		m.paramNames -> isEmpty() and
		m.paramTypes -> isEmpty() and
		m.returnType = self.type
 	);

-- verifie qu'un attribut possede un setter 
helper context ClassDiagram!Attribute def: hasSetter() : Boolean = 
	self.owner.methods -> exists ( m |
		m.name = 'set' + self.name.firstToUpper() and
		m.paramNames -> size() = 1 and
		m.paramTypes -> includes( self.type ) and
		m.returnType = thisModule.voidType
 	);

-- ********************************************************************
-- Duplication de tous les elements du modele a l'identique, sauf les attributs 
-- car il faut d'abord verifier s'ils ont un setter ou un getter pour les generer
-- en complement.

rule duplicateModelBase {
from
    sourceBase : ClassDiagram!ModelBase
to
    cibleBase : ClassDiagram!ModelBase (
        allClasses <- sourceBase.allClasses,
        --allInterfaces <- sourceBase.allInterfaces,
        allInterfaces <- ClassDiagram!Interface.allInstances(),
        allAssociations <- sourceBase.allAssociations,
        voidT <- sourceBase.voidT,
        intT <- sourceBase.intT,
        stringT <- sourceBase.stringT,
        boolT <- sourceBase.boolT
    )
}

rule duplicateClass {
from
    sourceClass : ClassDiagram!Class
to
    cibleClass : ClassDiagram!Class (
        name <- sourceClass.name,
        attributes <- sourceClass.attributes,
        --methods <- sourceClass.methods,
        interfaces <- sourceClass.interfaces,
        associations <- sourceClass.associations
    ),
    inter : ClassDiagram!Interface (
        name <- 'I' + sourceClass.name,
        methods <-sourceClass.methods
    )
}

rule duplicateInterface  {
from
	interfaceSource : ClassDiagram!Interface
to
	interfaceCible : ClassDiagram!Interface (
		name <- interfaceSource.name,
		methods <- interfaceSource.methods,
		implementedBy <- interfaceSource.implementedBy
	)
}

rule duplicateMethod {
from
    methodSource : ClassDiagram!Method
to
    methodCible : ClassDiagram!Method (
        name <- methodSource.name,
        --owner <- methodSource.owner,
        returnType <- methodSource.returnType,
        paramTypes <- methodSource.paramTypes,
        paramNames <- methodSource.paramNames
    )
}

rule duplicateAssociationEnd {
from
	aeSource : ClassDiagram!AssociationEnd
to
	aeCible : ClassDiagram!AssociationEnd (
		name <- aeSource.name,
		lowerBound <- aeSource.lowerBound,
		upperBound <- aeSource.upperBound,
		_class <- aeSource._class,
		association <- aeSource.association
	)
}

rule duplicateAssociation {
from
	associationSource : ClassDiagram!Association 
to
	associationCible : ClassDiagram!Association (
		name <- associationSource.name,
		ends <- associationSource.ends
	)
}

rule duplicationVoidType {
from
	voidTypeSource : ClassDiagram!VoidType 
to
	voidTypeCible : ClassDiagram!VoidType (
		name <- voidTypeSource.name
	)
}

rule duplicationIntegerType {
from
	integerTypeSource : ClassDiagram!IntegerType 
to
	integerTypeCible : ClassDiagram!IntegerType (
		name <- integerTypeSource.name
	)
}

rule duplicationStringType {
from
	stringTypeSource : ClassDiagram!StringType 
to
	stringTypeCible : ClassDiagram!StringType (
		name <- stringTypeSource.name
	)
}

rule duplicationBooleanType {
from
	booleanTypeSource : ClassDiagram!BooleanType 
to
	booleanTypeCible : ClassDiagram!BooleanType (
		name <- booleanTypeSource.name
	)
}


-- **********************************************************************
-- Duplication des attributs, avec creation au besoin des methodes getter
-- et setter associees. 4 regles selon que l'attribut possede :
-- 1) Deja son getter et son setter
-- 2) Un setter mais pas de getter
-- 3) Un getter mais pas de setter
-- 4) Ni setter ni getter

rule attributeHasAll {
from 
	attSource : ClassDiagram!Attribute (
		attSource.hasSetter() and attSource.hasGetter())
to
	attTarget : ClassDiagram!Attribute (
		name <- attSource.name,
		owner <- attSource.owner,
		type <- attSource.type,
		multiplicity <- attSource.multiplicity
	)
}
	
rule attributeHasSetter {
from 
	attSource : ClassDiagram!Attribute (
		attSource.hasSetter() and not(attSource.hasGetter())
	)
to
	attTarget : ClassDiagram!Attribute (
		name <- attSource.name,
		owner <- attSource.owner,
		type <- attSource.type,
		multiplicity <- attSource.multiplicity
	),	
	getter : ClassDiagram!Method (
		name <- 'get' + attSource.name.firstToUpper(),
		returnType <- attTarget.type,
		owner <- attTarget.owner
	)
}

rule attributeHasGetter {
from
	attSource : ClassDiagram!Attribute (
		not(attSource.hasSetter()) and attSource.hasGetter()
	)
to
	attTarget : ClassDiagram!Attribute (
		name <- attSource.name,
		owner <- attSource.owner,
		type <- attSource.type,
		multiplicity <- attSource.multiplicity
	),		
	setter : ClassDiagram!Method (
		name <- 'set' + attSource.name.firstToUpper(),
		returnType <- thisModule.voidType,
		owner <- attTarget.owner,
		paramNames <- Set { 'value' },
		paramTypes <- Set { attTarget.type }
	) 
}

rule attributeHasNothing {
from
	attSource : ClassDiagram!Attribute (
		not(attSource.hasSetter()) and not(attSource.hasGetter())
	)
to
	attTarget : ClassDiagram!Attribute (
		name <- attSource.name,
		owner <- attSource.owner,
		type <- attSource.type,
		multiplicity <- attSource.multiplicity
	),		
	setter : ClassDiagram!Method (
		name <- 'set' + attSource.name.firstToUpper(),
		returnType <- thisModule.voidType,
		owner <- attTarget.owner,
		paramNames <- Set { 'value' },
		paramTypes <- Set { attTarget.type }
	),	
	getter : ClassDiagram!Method (
		name <- 'get' + attSource.name.firstToUpper(),
		returnType <- attTarget.type,
		owner <- attTarget.owner
	)
}
